using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Frameworks.Models;
//Prerequisites: C# Basic language, OOP, Arrays. Exceptions, Delegates. 

//Collections are a framework provided by .NET for creating data Structures. There are 2 versions: Generic Collections and Non Generic Collections.  Non Generic Collections was available from the .NET 1.0(2002) and Generics came in .NET 2.0(2005)
// Majorlly Generic collections is what is used in the industry, however, we should be aware of the Non Generic Collections which was the foundation for the Generic Collections. 
//Collections provide ready to use data structures to store large amount of data of similar kind or same and use them as a group and easily iterable. It resolves the issues of Arrays as Arrays are fixed in Size.
//System.Collections is the namespace for working with Collections:
//Important classes: ArrayList, HashTable are the examples of Predefined classes under Collections. 
//Add, Count, Remove, Contains, Insert, InsertRange
//HashTable is a collection class that store the data in the form key=value pairs where key part is unique and value might not be. 
//Generics helps in creating types(Classes and Structs) that can work on multiple data types. Similar to Templates of C++.
//Generic classes come under System.Collections.Generics Namespace. Some of the pre defined classes of Generics are: List<T>. HashSet<T>, Dictionary<K,V>, Stack<T>, Queue<T>, LinkedList<T> SortedDictionary<T> and few more. 
//The Main advantage of using Generic collection is that it is type safe. Generic collections are also called as TypeSafe Collections. There is no scope of BOXING and UNBOXING, UR App will be faster in execution. 
//HashSet<T> stores unique values unlike List<T>. HashSet applies its uniqueness by refering the Hashcode value of the object. HashCode is a unique no generated by the CLR for every type used in the Application. 

namespace Frameworks
{
    public delegate void DisplayFunc();
    internal class Ex20Collections
    {
        static void Main(string[] args)
        {
            //arrayListExample();
            //hashtableExample();
            //listExample();
            //listOfEmployeesExample();
            //hashSetExample();
            //hashSetForEmployees();
            //dictionaryExample();
            //StackExample();
            //QueueExample();
            //SortedListExample();
            sortingOfData();
        }

        private static void sortingOfData()
        {
            //List<string> data = new List<string>();
            //data.Add("David");
            //data.Add("Jason");
            //data.Add("Donald");
            //data.Add("Andrew");
            //data.Add("Leo");
            //data.Add("Zaheer");
            //data.Add("Kumar");
            //data.Add("Stella");
            //data.Sort();
            //foreach (var item in data) { Console.WriteLine(item); }

            List<Employee> employees = new List<Employee>();
            employees.Add(new Employee {EmpId = 123, EmpName ="David", EmpAddress ="Mumbai", EmpSalary = 56000 });
            employees.Add(new Employee { EmpId = 124, EmpName = "Donald", EmpAddress = "Mumbai", EmpSalary = 76000 });
            employees.Add(new Employee { EmpId = 115, EmpName = "Jason", EmpAddress = "Mumbai", EmpSalary = 36000 });
            employees.Add(new Employee { EmpId = 126, EmpName = "Stella", EmpAddress = "Mumbai", EmpSalary = 26000 });
            employees.Add(new Employee { EmpId = 113, EmpName = "Gillespi", EmpAddress = "Mumbai", EmpSalary = 12000 });
            employees.Sort(new EmployeeComparer(EmployeeCriteria.Salary));
            foreach (var emp in employees) { Console.WriteLine(emp); }
        }

        //SortedList and SortedDictionary, Dictionary uses Treemap structure to sort and SortedList uses Array to Sort, memory wise, Sorted List is more performance oriented. 
        private static void SortedListExample()
        {
            SortedList<int, string> empList = new SortedList<int, string>();
            empList.Add(123, "EmpName1");
            empList.Add(133, "EmpName2");
            empList.Add(113, "EmpName3");
            empList.Add(143, "EmpName4");
            empList.Add(125, "EmpName5");
            foreach(var pair in empList)
                Console.WriteLine(pair.Key);
        }

        private static void QueueExample()
        {
            Queue<string> recentList = new Queue<string>();
            do
            {
                Console.WriteLine("Enter the Item U want to view");
                string item = Console.ReadLine();
                if(recentList.Count == 5)
                {
                    recentList.Dequeue();//Removes the first item in the Queue.
                }
                recentList.Enqueue(item);//Adds the Item to the bottom of the Queue
                Console.WriteLine("UR recent Items List:");
                var list = recentList.Reverse();
                foreach(var element in list)
                    Console.WriteLine(element);
            } while (true);

        }

        static Stack<string> cards= new Stack<string>();

        private static void addToStack(ConsoleColor color, string item)
        {
            Console.ForegroundColor = color;
            Console.WriteLine(item);
            Console.ForegroundColor= ConsoleColor.White;
        }

        private static ConsoleColor GetColor(string type)
        {
            Dictionary<string, ConsoleColor> colors = new Dictionary<string, ConsoleColor>();
            colors.Add("Spade", ConsoleColor.Black);    
            colors.Add("Diamond", ConsoleColor.Red);    
            colors.Add("Heart", ConsoleColor.Red);    
            colors.Add("Club", ConsoleColor.Black);
            return colors[type];
        }
        private static void StackExample()
        {
            //What is stack<T>: Stores the data as Last In, First Out.
            cards.Push("Spade A");
            cards.Push("Heart 2");
            cards.Push("Spade 3");
            cards.Push("Club 4");
            cards.Pop();//Always removes the last added item...
            foreach (var item in cards) 
            {
                string type = item.Split(' ')[0];
                var color = GetColor(type);
                addToStack(color, item);  
            }
        }

        private static void dictionaryExample()
        {
            //Dictionary is similar to HashTable. 
            //How to create Dictionary object.
            Dictionary<string, string> pairs = new Dictionary<string, string>();
            //How to add items to it
            pairs.Add("Key", "Value");//If the key already exists, throws an Exception
            pairs["NewKey"] = "NewValue";//It replaces the value. 
            //How to check if an item exists
            if (pairs.ContainsKey("Key"))
            {
                Console.WriteLine("Key already exists");
            }
            //What happens if U try to add a duplicate key. If exception? what type.
            //pairs.Add("Key", "Test");
            //How to display the key and value pairs in a foreach loop.
            foreach (KeyValuePair<string, string> item in pairs)
            {
                Console.WriteLine($"Key: {item.Key}\tValue: {item.Value}");
            }
        }



        private static void hashSetForEmployees()
        {
            HashSet<Employee> empList = new HashSet<Employee>();
            empList.Add(new Employee { EmpId = 1, EmpName = "Ramesh", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 2, EmpName = "Garner", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 3, EmpName = "David", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 4, EmpName = "Turner", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 5, EmpName = "Shiv", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 1, EmpName = "Ramesh", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 2, EmpName = "Garner", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 3, EmpName = "David", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 4, EmpName = "Turner", EmpAddress = "Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 5, EmpName = "Shiv", EmpAddress = "Bangalore", EmpSalary = 67000 });
            Console.WriteLine("The count: " + empList.Count);
            foreach (var emp in empList)
            {
                Console.WriteLine(emp.GetHashCode());
            }
        }

        private static void hashSetExample()
        {
            HashSet<string> cart = new HashSet<string>();
            cart.Add("Apples");
            cart.Add("apples");
            if(!cart.Add("Apples"))
                Console.WriteLine("Apples already exists in the cart"); ;
            cart.Add("Apples");
            Console.WriteLine("The Count : " + cart.Count);
        }

        private static void listOfEmployeesExample()
        {
            List<Employee> empList = new List<Employee>();
            empList.Add(new Employee { EmpId = 1, EmpName ="Ramesh", EmpAddress ="Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 2, EmpName ="Garner", EmpAddress ="Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 3, EmpName ="David", EmpAddress ="Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 4, EmpName ="Turner", EmpAddress ="Bangalore", EmpSalary = 67000 });
            empList.Add(new Employee { EmpId = 5, EmpName ="Shiv", EmpAddress ="Bangalore", EmpSalary = 67000 });

            foreach (var emp in empList)
            {
                Console.WriteLine(emp.EmpName);
            }
        }

        private static void listExample()
        {
            //List is the improvised version of ArrayList. 
            List<string> list = new List<string>();
            list.Add("Apples");
            list.Add("Mangoes");
            list.Add("Oranges");
            list.Add("Bananas");
            list.Add("Chikku");
            list.Add("Kiwis");
            list.Insert(3, "Custard Apples");            
            display("listExample", () =>
            {
                foreach (var item in list)
                {
                    Console.WriteLine(item.ToUpper());
                }
            });
            Console.WriteLine("The Count: " + list.Count);
            list.RemoveAll((str) =>
            {
                return str.Contains("pp"); 
            });
            Console.WriteLine("The Count: " + list.Count);
            Console.WriteLine("Enter the Item name to find");
            string findingName = Console.ReadLine();
            var fruits = list.FindAll((fruitName) =>
            {
                return fruitName.Contains(findingName);
            });
            if (fruits != null) {
                display("Finding fruits", () =>
                {
                    foreach (var item in fruits)
                        Console.WriteLine(item);
                });
            }
            else
            {
                Console.WriteLine("No fruit is found");
            }
        }

        private static void hashtableExample()
        {
            var condition = "";
            Hashtable users = new Hashtable();
            do
            {
                Console.WriteLine("enter the user name");
                string input = Console.ReadLine();
                Console.WriteLine("Enter the Passkey");
                string pass = Console.ReadLine();
                if (users.ContainsKey(input))
                {
                    Console.WriteLine("User already exists");
                }
                else
                {
                    users.Add(input, pass);
                }
                Console.WriteLine("Do U want to add new user, press Y or any other");
                condition = Console.ReadLine();
            } while (condition.ToUpper() == "Y");
            foreach(DictionaryEntry pair in users)
                Console.WriteLine($"{pair.Key} ---> {pair.Value}");
        }

        private static void arrayListExample()
        {
            //ArrayList is the Extended feature of Array with abilities to add, remove elements within it.  
            ArrayList list = new ArrayList();
            list.Add("Washington Apples");//Adds the element to the bottom of the Collection.
            list.Add("PineApples");
            list.Add("Curstard Apples");
            list.Add("Ooty Apples");
            list.Add("Simla Apples");
            Console.WriteLine("The no of elements within the list: " + list.Count);
            list.Add("Kashmir Apples");
            Console.WriteLine("The no of elements within the list: " + list.Count);
            if(list.Contains("Kashmir APPLES"))
                list.Remove("Kashmir APPLES");
            else
                Console.WriteLine("Kashmir APPLES is not in the list to remove it");
            list.Insert(3, "Alphonso Mangoes");
            Console.WriteLine("The no of elements within the list: " + list.Count);
            display("using foreach", () =>
            {
                foreach (var item in list)
                {
                    Console.WriteLine(item);
                }
            });

            display("usingFor", () =>
            {
                for (int i = 0; i < list.Count; i++)
                {
                    Console.WriteLine(list[i]);
                }
            });

            list.Add(123);
            list.Add(123.45);
            

            display("For Uppercase", () =>
            {
                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i] is string)
                    {
                        var temp = list[i].ToString();
                        temp += "123";
                    }
                    else
                    {
                        var itemp = (int)list[i];
                        itemp += 123;
                    }
                    Console.WriteLine(list[i]);
                }
            });
            //Limitations:
            //ArrayList can store any kind of data as it stores as object. Internally objects are stored as BOXED Values. To read the values again, U should unbox it which is a time consuming process and so it is not optimized.
            //As any of data is stored in the ArrayList, performing common operations might not be possible always. 
        }

        public static void display(string title , DisplayFunc func)
        {
            Console.WriteLine($"//////////////////////////////{title}////////////////////////////////////");
            func();
            Console.WriteLine("//////////////////////////////////////////////////////////////////");

        }
    }
    //Task: Make the HashTable example an iteractive App where the User can choose to either sign in or sign up. Based on the selected choice, UR App should call the appropriate function and perform the operations. 

}
