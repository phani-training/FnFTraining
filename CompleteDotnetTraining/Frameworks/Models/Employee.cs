using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//All data types in C# are derived from System.Object. The object is the C# keyword for System.Object.  
//object has 4 methods:
//ToString() => String equivalent of UR object,
//GetType()=> Gets the CTS type of the object,
//GetHashCode()=>Gets the Unique Id of the object generated by the CLR,
//Equals(T other) =>Defines the logical equivalence of the current object with the other.  
namespace Frameworks.Models
{
    internal class Employee : IComparable<Employee> 
    {
        public int EmpId { get; set; }
        public string EmpName { get; set; }
        public string EmpAddress { get; set; }
        public int EmpSalary { get; set; }

        public override int GetHashCode()
        {
            return EmpId;
        }

        public override bool Equals(object other)
        {
          //NOTE: is and as operator works only for reference types...   
            if(other is Employee) //Check if the other is of the data type Employee.....
            {
                //Unbox the other.
                Employee temp = other as Employee;
                if(temp.EmpName == this.EmpName && temp.EmpSalary  == this.EmpSalary)
                {
                    return true;
                }
            }
            return false;                
        }

        public int CompareTo(Employee other)
        {
            return EmpName.CompareTo(other.EmpName);    
        }

        public override string ToString()
        {
            return $"{EmpId},{EmpName}, {EmpAddress}, {EmpSalary}\n";
        }
    }

    enum EmployeeCriteria
    {
        Id, Name, Address, Salary
    }
    internal class EmployeeComparer : IComparer<Employee>
    {
        private EmployeeCriteria criteria;
        public EmployeeComparer(EmployeeCriteria criteria)
        {
            this.criteria = criteria;   
        }

        public int Compare(Employee first, Employee other)
        {
            switch (criteria)
            {
                case EmployeeCriteria.Id:
                    if (first.EmpId > other.EmpId)
                        return 1;
                    else if(first.EmpId < other.EmpId)
                        return -1;
                    else
                    {
                        return 0;
                    }
                case EmployeeCriteria.Name:
                    return first.CompareTo(other);
                case EmployeeCriteria.Address:
                    return first.EmpAddress.CompareTo(other.EmpAddress);
                case EmployeeCriteria.Salary:
                    return first.EmpSalary.CompareTo(other.EmpSalary);
                default:
                    return 0;
            }
        }
    }
}
